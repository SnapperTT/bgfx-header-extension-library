static const uint8_t fs_lum_bin_glsl[] = {
  0x46, 0x53, 0x48, 0x06, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0a, 0x73,  // FSH.o.><.......s
  0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x08,  // _texColor.......
  0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x02, 0x10, 0x00, 0x00, 0x10, 0x00, 0xb4, 0x04,  // u_offset........
  0x00, 0x00, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76,  // ..varying vec2 v
  0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66,  // _texcoord0;.unif
  0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x73, 0x5f,  // orm sampler2D s_
  0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72,  // texColor;.unifor
  0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b,  // m vec4 u_offset[
  0x31, 0x36, 0x5d, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x28,  // 16];.void main (
  0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61,  // ).{.  vec4 tmpva
  0x72, 0x5f, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x2e,  // r_1;.  tmpvar_1.
  0x79, 0x7a, 0x77, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20,  // yzw = vec3(0.0, 
  0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70,  // 0.0, 1.0);.  tmp
  0x76, 0x61, 0x72, 0x5f, 0x31, 0x2e, 0x78, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x0a, 0x20, 0x20,  // var_1.x = (((.  
  0x20, 0x20, 0x28, 0x64, 0x6f, 0x74, 0x20, 0x28, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x32,  //   (dot (vec3(0.2
  0x31, 0x32, 0x36, 0x37, 0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x37, 0x31, 0x35, 0x31, 0x35, 0x32,  // 126729, 0.715152
  0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x32, 0x31, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x74, 0x65,  // 2, 0.072175), te
  0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f,  // xture2D (s_texCo
  0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64,  // lor, (v_texcoord
  0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x30, 0x5d, 0x2e,  // 0 + u_offset[0].
  0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x64, 0x6f, 0x74, 0x20,  // xy)).xyz) + dot 
  0x28, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x32, 0x36, 0x37, 0x32, 0x39, 0x2c,  // (vec3(0.2126729,
  0x20, 0x30, 0x2e, 0x37, 0x31, 0x35, 0x31, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x37,  //  0.7151522, 0.07
  0x32, 0x31, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44,  // 2175), texture2D
  0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76,  //  (s_texColor, (v
  0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f,  // _texcoord0 + u_o
  0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x79,  // ffset[1].xy)).xy
  0x7a, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x2b, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x28, 0x64,  // z)).   + .    (d
  0x6f, 0x74, 0x20, 0x28, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x32, 0x36, 0x37,  // ot (vec3(0.21267
  0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x37, 0x31, 0x35, 0x31, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x30,  // 29, 0.7151522, 0
  0x2e, 0x30, 0x37, 0x32, 0x31, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,  // .072175), textur
  0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c,  // e2D (s_texColor,
  0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20,  //  (v_texcoord0 + 
  0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29,  // u_offset[2].xy))
  0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x64, 0x6f, 0x74, 0x20, 0x28, 0x76, 0x65, 0x63,  // .xyz) + dot (vec
  0x33, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x32, 0x36, 0x37, 0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x37,  // 3(0.2126729, 0.7
  0x31, 0x35, 0x31, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x32, 0x31, 0x37, 0x35,  // 151522, 0.072175
  0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f,  // ), texture2D (s_
  0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78,  // texColor, (v_tex
  0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,  // coord0 + u_offse
  0x74, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x0a,  // t[3].xy)).xyz)).
  0x20, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x28, 0x64, 0x6f, 0x74,  //   ) + (.    (dot
  0x20, 0x28, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x32, 0x36, 0x37, 0x32, 0x39,  //  (vec3(0.2126729
  0x2c, 0x20, 0x30, 0x2e, 0x37, 0x31, 0x35, 0x31, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30,  // , 0.7151522, 0.0
  0x37, 0x32, 0x31, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32,  // 72175), texture2
  0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28,  // D (s_texColor, (
  0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f,  // v_texcoord0 + u_
  0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x34, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78,  // offset[4].xy)).x
  0x79, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x64, 0x6f, 0x74, 0x20, 0x28, 0x76, 0x65, 0x63, 0x33, 0x28,  // yz) + dot (vec3(
  0x30, 0x2e, 0x32, 0x31, 0x32, 0x36, 0x37, 0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x37, 0x31, 0x35,  // 0.2126729, 0.715
  0x31, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x32, 0x31, 0x37, 0x35, 0x29, 0x2c,  // 1522, 0.072175),
  0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65,  //  texture2D (s_te
  0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f,  // xColor, (v_texco
  0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b,  // ord0 + u_offset[
  0x35, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x0a, 0x20, 0x20,  // 5].xy)).xyz)).  
  0x20, 0x2b, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x28, 0x28, 0x64, 0x6f, 0x74, 0x20, 0x28, 0x76,  //  + .    ((dot (v
  0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x32, 0x36, 0x37, 0x32, 0x39, 0x2c, 0x20, 0x30,  // ec3(0.2126729, 0
  0x2e, 0x37, 0x31, 0x35, 0x31, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x32, 0x31,  // .7151522, 0.0721
  0x37, 0x35, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28,  // 75), texture2D (
  0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74,  // s_texColor, (v_t
  0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66,  // excoord0 + u_off
  0x73, 0x65, 0x74, 0x5b, 0x36, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29,  // set[6].xy)).xyz)
  0x20, 0x2b, 0x20, 0x64, 0x6f, 0x74, 0x20, 0x28, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x32,  //  + dot (vec3(0.2
  0x31, 0x32, 0x36, 0x37, 0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x37, 0x31, 0x35, 0x31, 0x35, 0x32,  // 126729, 0.715152
  0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x32, 0x31, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x74, 0x65,  // 2, 0.072175), te
  0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f,  // xture2D (s_texCo
  0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64,  // lor, (v_texcoord
  0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x37, 0x5d, 0x2e,  // 0 + u_offset[7].
  0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x64, 0x6f, 0x74,  // xy)).xyz)) + dot
  0x20, 0x28, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x32, 0x36, 0x37, 0x32, 0x39,  //  (vec3(0.2126729
  0x2c, 0x20, 0x30, 0x2e, 0x37, 0x31, 0x35, 0x31, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30,  // , 0.7151522, 0.0
  0x37, 0x32, 0x31, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32,  // 72175), texture2
  0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28,  // D (s_texColor, (
  0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f,  // v_texcoord0 + u_
  0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x38, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78,  // offset[8].xy)).x
  0x79, 0x7a, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x31, 0x31,  // yz)).  )) * 0.11
  0x31, 0x31, 0x31, 0x31, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61,  // 11111);.  gl_Fra
  0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f,  // gColor = tmpvar_
  0x31, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00 };                                                      // = tmpvar_1;.}...
unsigned int fs_lum_bin_glsl_size = 1255;

BX_UNUSED(fs_lum_bin_glsl)
BX_UNUSED(fs_lum_bin_glsl_size)
static const uint8_t * fs_lum_bin_dx9 = NULL;
unsigned int fs_lum_bin_dx9_size = 0;

BX_UNUSED(fs_lum_bin_dx9)
BX_UNUSED(fs_lum_bin_dx9_size)
static const uint8_t * fs_lum_bin_dx11 = NULL;
unsigned int fs_lum_bin_dx11_size = 0;

BX_UNUSED(fs_lum_bin_dx11)
BX_UNUSED(fs_lum_bin_dx11_size)
static const uint8_t * fs_lum_bin_metal = NULL;
unsigned int fs_lum_bin_metal_size = 0;

BX_UNUSED(fs_lum_bin_metal)
BX_UNUSED(fs_lum_bin_metal_size)
static const uint8_t * fs_lum_bin_spirv = NULL;
unsigned int fs_lum_bin_spirv_size = 0;

BX_UNUSED(fs_lum_bin_spirv)
BX_UNUSED(fs_lum_bin_spirv_size)
static const uint8_t * fs_lum_bin_esslandroid = NULL;
unsigned int fs_lum_bin_esslandroid_size = 0;

BX_UNUSED(fs_lum_bin_esslandroid)
BX_UNUSED(fs_lum_bin_esslandroid_size)
static const uint8_t * fs_lum_bin_pssl = NULL;
unsigned int fs_lum_bin_pssl_size = 0;

BX_UNUSED(fs_lum_bin_pssl)
BX_UNUSED(fs_lum_bin_pssl_size)
static const uint8_t * fs_lum_bin_esslnacl = NULL;
unsigned int fs_lum_bin_esslnacl_size = 0;

BX_UNUSED(fs_lum_bin_esslnacl)
BX_UNUSED(fs_lum_bin_esslnacl_size)
