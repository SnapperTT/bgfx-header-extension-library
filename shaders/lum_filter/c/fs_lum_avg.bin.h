static const uint8_t fs_lum_avg_bin_glsl[] = {
  0x46, 0x53, 0x48, 0x06, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0a, 0x73,  // FSH.o.><.......s
  0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x08,  // _texColor.......
  0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x02, 0x10, 0x00, 0x00, 0x10, 0x00, 0xb0, 0x05,  // u_offset........
  0x00, 0x00, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76,  // ..varying vec2 v
  0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66,  // _texcoord0;.unif
  0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x73, 0x5f,  // orm sampler2D s_
  0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72,  // texColor;.unifor
  0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b,  // m vec4 u_offset[
  0x31, 0x36, 0x5d, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x28,  // 16];.void main (
  0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x75, 0x6d, 0x5f,  // ).{.  float sum_
  0x31, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x65,  // 1;.  sum_1 = (te
  0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f,  // xture2D (s_texCo
  0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64,  // lor, (v_texcoord
  0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x30, 0x5d, 0x2e,  // 0 + u_offset[0].
  0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,  // xy)).x + texture
  0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20,  // 2D (s_texColor, 
  0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75,  // (v_texcoord0 + u
  0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e,  // _offset[1].xy)).
  0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73,  // x);.  sum_1 = (s
  0x75, 0x6d, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44,  // um_1 + texture2D
  0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76,  //  (s_texColor, (v
  0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f,  // _texcoord0 + u_o
  0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29,  // ffset[2].xy)).x)
  0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d,  // ;.  sum_1 = (sum
  0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28,  // _1 + texture2D (
  0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74,  // s_texColor, (v_t
  0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66,  // excoord0 + u_off
  0x73, 0x65, 0x74, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a,  // set[3].xy)).x);.
  0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31,  //   sum_1 = (sum_1
  0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f,  //  + texture2D (s_
  0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78,  // texColor, (v_tex
  0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,  // coord0 + u_offse
  0x74, 0x5b, 0x34, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20,  // t[4].xy)).x);.  
  0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x2b,  // sum_1 = (sum_1 +
  0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65,  //  texture2D (s_te
  0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f,  // xColor, (v_texco
  0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b,  // ord0 + u_offset[
  0x35, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75,  // 5].xy)).x);.  su
  0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74,  // m_1 = (sum_1 + t
  0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43,  // exture2D (s_texC
  0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72,  // olor, (v_texcoor
  0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x36, 0x5d,  // d0 + u_offset[6]
  0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f,  // .xy)).x);.  sum_
  0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78,  // 1 = (sum_1 + tex
  0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c,  // ture2D (s_texCol
  0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30,  // or, (v_texcoord0
  0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x37, 0x5d, 0x2e, 0x78,  //  + u_offset[7].x
  0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20,  // y)).x);.  sum_1 
  0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75,  // = (sum_1 + textu
  0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72,  // re2D (s_texColor
  0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b,  // , (v_texcoord0 +
  0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x38, 0x5d, 0x2e, 0x78, 0x79, 0x29,  //  u_offset[8].xy)
  0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20,  // ).x);.  sum_1 = 
  0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,  // (sum_1 + texture
  0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20,  // 2D (s_texColor, 
  0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75,  // (v_texcoord0 + u
  0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x39, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e,  // _offset[9].xy)).
  0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73,  // x);.  sum_1 = (s
  0x75, 0x6d, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44,  // um_1 + texture2D
  0x20, 0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76,  //  (s_texColor, (v
  0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f,  // _texcoord0 + u_o
  0x66, 0x66, 0x73, 0x65, 0x74, 0x5b, 0x31, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78,  // ffset[10].xy)).x
  0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75,  // );.  sum_1 = (su
  0x6d, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20,  // m_1 + texture2D 
  0x28, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f,  // (s_texColor, (v_
  0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66,  // texcoord0 + u_of
  0x66, 0x73, 0x65, 0x74, 0x5b, 0x31, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29,  // fset[11].xy)).x)
  0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d,  // ;.  sum_1 = (sum
  0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28,  // _1 + texture2D (
  0x73, 0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74,  // s_texColor, (v_t
  0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66,  // excoord0 + u_off
  0x73, 0x65, 0x74, 0x5b, 0x31, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b,  // set[12].xy)).x);
  0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f,  // .  sum_1 = (sum_
  0x31, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73,  // 1 + texture2D (s
  0x5f, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65,  // _texColor, (v_te
  0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73,  // xcoord0 + u_offs
  0x65, 0x74, 0x5b, 0x31, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a,  // et[13].xy)).x);.
  0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31,  //   sum_1 = (sum_1
  0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f,  //  + texture2D (s_
  0x74, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78,  // texColor, (v_tex
  0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,  // coord0 + u_offse
  0x74, 0x5b, 0x31, 0x34, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20,  // t[14].xy)).x);. 
  0x20, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20,  //  sum_1 = (sum_1 
  0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x28, 0x73, 0x5f, 0x74,  // + texture2D (s_t
  0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63,  // exColor, (v_texc
  0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x75, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,  // oord0 + u_offset
  0x5b, 0x31, 0x35, 0x5d, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20,  // [15].xy)).x);.  
  0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x3b, 0x0a, 0x20,  // vec4 tmpvar_2;. 
  0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x79, 0x7a, 0x77, 0x20, 0x3d, 0x20,  //  tmpvar_2.yzw = 
  0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31,  // vec3(0.0, 0.0, 1
  0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x2e,  // .0);.  tmpvar_2.
  0x78, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x31, 0x36, 0x2e,  // x = (sum_1 / 16.
  0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c,  // 0);.  gl_FragCol
  0x6f, 0x72, 0x20, 0x3d, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x3b, 0x0a, 0x7d,  // or = tmpvar_2;.}
  0x0a, 0x0a, 0x00 };                                                                              // = tmpvar_2;.}...
unsigned int fs_lum_avg_bin_glsl_size = 1507;

BX_UNUSED(fs_lum_avg_bin_glsl)
BX_UNUSED(fs_lum_avg_bin_glsl_size)
static const uint8_t * fs_lum_avg_bin_dx9 = NULL;
unsigned int fs_lum_avg_bin_dx9_size = 0;

BX_UNUSED(fs_lum_avg_bin_dx9)
BX_UNUSED(fs_lum_avg_bin_dx9_size)
static const uint8_t * fs_lum_avg_bin_dx11 = NULL;
unsigned int fs_lum_avg_bin_dx11_size = 0;

BX_UNUSED(fs_lum_avg_bin_dx11)
BX_UNUSED(fs_lum_avg_bin_dx11_size)
static const uint8_t * fs_lum_avg_bin_metal = NULL;
unsigned int fs_lum_avg_bin_metal_size = 0;

BX_UNUSED(fs_lum_avg_bin_metal)
BX_UNUSED(fs_lum_avg_bin_metal_size)
static const uint8_t * fs_lum_avg_bin_spirv = NULL;
unsigned int fs_lum_avg_bin_spirv_size = 0;

BX_UNUSED(fs_lum_avg_bin_spirv)
BX_UNUSED(fs_lum_avg_bin_spirv_size)
static const uint8_t * fs_lum_avg_bin_esslandroid = NULL;
unsigned int fs_lum_avg_bin_esslandroid_size = 0;

BX_UNUSED(fs_lum_avg_bin_esslandroid)
BX_UNUSED(fs_lum_avg_bin_esslandroid_size)
static const uint8_t * fs_lum_avg_bin_pssl = NULL;
unsigned int fs_lum_avg_bin_pssl_size = 0;

BX_UNUSED(fs_lum_avg_bin_pssl)
BX_UNUSED(fs_lum_avg_bin_pssl_size)
static const uint8_t * fs_lum_avg_bin_esslnacl = NULL;
unsigned int fs_lum_avg_bin_esslnacl_size = 0;

BX_UNUSED(fs_lum_avg_bin_esslnacl)
BX_UNUSED(fs_lum_avg_bin_esslnacl_size)
