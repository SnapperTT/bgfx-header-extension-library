#hdr

#include <vector>
#end

#src
#end

namespace bgfxh {
	struct meshFace {
		uint16_t a;
		uint16_t b;
		uint16_t c;
		
		inline meshFace () {}
		inline meshFace (const uint16_t _a, const uint16_t _b, const uint16_t _c) : a(_a), b(_b), c(_c) {}
		};
		
	/// A Simple Mesh class
	//bgfxh::PosVertex::ms_decl
	/// Index type should be uint16_t or uint32_t
	template<typename VERT_TYPE, typename DECL_TYPE, typename INDEX_TYPE>
	struct mesh {
		vector<VERT_TYPE> verts;
		vector<INDEX_TYPE> indices;
		vector<meshFace> faces;
		
		bgfx::VertexBufferHandle m_vbh;
		bgfx::IndexBufferHandle m_ibh;
		
		inline mesh() : m_vbh(BGFX_INVALID_HANDLE), m_ibh(BGFX_INVALID_HANDLE) {}
		~mesh() { destroy(); }
		
		static void internal_freeVerts_cb(void* _ptr, void* _userData) {
			BX_UNUSED(_ptr);
			vector<VERT_TYPE>* vertsHeap = (vector<VERT_TYPE>*)_userData;
			delete vertsHeap;
			}
			
		static void internal_freeIndicies_cb(void* _ptr, void* _userData) {
			BX_UNUSED(_ptr);
			vector<INDEX_TYPE>* indicesHeap = (vector<INDEX_TYPE>*)_userData;
			delete indicesHeap;
			}
		
		void upload (bool freeOnUploadComplete = true) {
			// Static data can be passed with bgfx::makeRef
			if (freeOnUploadComplete) {
				faces.clear();
				
				vector<VERT_TYPE>* vertsHeap = new vector<VERT_TYPE>;
				vector<INDEX_TYPE>* indicesHeap = new vector<INDEX_TYPE>;
				vertsHeap->swap(verts);
				indicesHeap->swap(indices);
				
				m_vbh = bgfx::createVertexBuffer(
					bgfx::makeRef(vertsHeap->data(), sizeof(VERT_TYPE)*vertsHeap->size(), internal_freeVerts_cb, vertsHeap )
					, DECL_TYPE::ms_decl
					);
				if (sizeof(INDEX_TYPE) == sizeof(uint32_t))
					m_ibh = bgfx::createIndexBuffer( bgfx::makeRef(indicesHeap->data(), sizeof(INDEX_TYPE)*indicesHeap->size(), internal_freeIndicies_cb, indicesHeap ), BGFX_BUFFER_INDEX32);
				else
					m_ibh = bgfx::createIndexBuffer( bgfx::makeRef(indicesHeap->data(), sizeof(INDEX_TYPE)*indicesHeap->size(), internal_freeIndicies_cb, indicesHeap ));
				}
			else {
				m_vbh = bgfx::createVertexBuffer(
					bgfx::makeRef(verts.data(), sizeof(VERT_TYPE)*verts.size() )
					, DECL_TYPE::ms_decl
					);
				if (sizeof(INDEX_TYPE) == sizeof(uint32_t))
					m_ibh = bgfx::createIndexBuffer( bgfx::makeRef(indices.data(), sizeof(INDEX_TYPE)*indices.size() ), BGFX_BUFFER_INDEX32 );
				else
					m_ibh = bgfx::createIndexBuffer( bgfx::makeRef(indices.data(), sizeof(INDEX_TYPE)*indices.size() ));
				}
			}
			
		void bind () {
			bgfx::setVertexBuffer(0, m_vbh);
			bgfx::setIndexBuffer(m_ibh);
			}
			
		void destroy () {
			bgfxh::destroyHandle (m_vbh);
			bgfxh::destroyHandle (m_ibh);
			}
		}; 
		
	typedef mesh<bx::Vec3, PosVertex, uint16_t> simpleMesh;
	//typedef mesh<VERT_TYPE, PosTexCoord0Vertex> simpleTexturedMesh;
	}
